# -*- coding: utf-8 -*-
"""Submission_pertama_machine_learning_terapan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bui8ghDmDbS959boIlsqR5q5av6pcYxY

# LIBRARY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report

"""# LOAD DATA"""

player_df = pd.read_csv("https://raw.githubusercontent.com/dfin12/submission_pertama_machine_learning_terapan/refs/heads/main/players_21.csv")

"""# EDA

Melihat tipe data setiap kolom
"""

player_df.info(verbose=True, max_cols=None)

player_df.head()

"""Melihat statistika deskriptif"""

player_df.describe()

"""Melihat missing value pada data"""

# pengecekan missing value
missing_values = player_df.isnull().sum()
columns_with_missing_values = missing_values[missing_values > 0]
columns_with_missing_values

"""Melihat adanya duplikasi pada data"""

# melihat duplikasi data
duplicate_rows = player_df[player_df.duplicated()]
duplicate_rows

"""# PREPROCESSING DATA

Mengisi skill gk_skill pada pemain outfield
"""

# membuat kolom gk_skill
player_df['gk_skill'] = player_df[['gk_diving', 'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning']].mean(axis=1)

# pemain outfield gk_skillnya nan, maka akan diisi dari 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes'
player_df['gk_skill_alt'] = player_df[['goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes']].mean(axis=1)
player_df['gk_skill'] = player_df['gk_skill'].fillna(player_df['gk_skill_alt'])
player_df.drop(columns=['gk_skill_alt'], inplace=True)

"""Mengisi skill pace, shooting, dribbling, passing, pace, defending, physic pada pemain GK"""

# skill pada posisi gk
player_df['is_gk'] = player_df['player_positions'].str.startswith('GK')

# Pace
player_df['pace'] = np.where(
    player_df['is_gk'],
    player_df[['movement_acceleration', 'movement_sprint_speed']].mean(axis=1),
    player_df['pace']
)

# Shooting
player_df['shooting'] = np.where(
    player_df['is_gk'],
    player_df[['attacking_finishing', 'attacking_volleys', 'power_shot_power', 'power_long_shots', 'mentality_penalties']].mean(axis=1),
    player_df['shooting']
)

# Passing
player_df['passing'] = np.where(
    player_df['is_gk'],
    player_df[['attacking_crossing', 'attacking_short_passing', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'mentality_vision']].mean(axis=1),
    player_df['passing']
)

# Defending
player_df['defending'] = np.where(
    player_df['is_gk'],
    player_df[['defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle', 'mentality_interceptions']].mean(axis=1),
    player_df['defending']
)

# Physic
player_df['physic'] = np.where(
    player_df['is_gk'],
    player_df[['power_strength', 'power_stamina', 'power_jumping', 'mentality_aggression', 'movement_balance']].mean(axis=1),
    player_df['physic']
)

# Dribbling
player_df['dribbling'] = np.where(
    player_df['is_gk'],
    player_df[['skill_dribbling', 'skill_ball_control', 'movement_agility', 'movement_reactions', 'mentality_composure', 'attacking_heading_accuracy']].mean(axis=1),
    player_df['dribbling']
)

player_df.drop(columns='is_gk', inplace=True)

# menyatukan skill pemain
skill = ['pace', 'shooting', 'passing', 'defending', 'physic', 'dribbling', 'gk_skill']

player_df[skill].info()

player_df["player_positions"]

"""Melihat distribusi pada skill pemain"""

# distribusi skill pemain
fig, axes = plt.subplots(nrows=1, ncols=len(skill), figsize=(20, 5))
fig.suptitle('Distribusi Skill Pemain per Kategori Skill', fontsize=16)

for i, col in enumerate(skill):
    sns.histplot(player_df[col], ax=axes[i], kde=True)
    axes[i].set_title(col.replace('_', ' ').title())
    axes[i].set_ylabel('Frekuensi')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# melihat posisi pemain
positions = player_df['player_positions'].str.split(', ').explode().value_counts()
print(positions)

"""Mengumpulkan posisi yang bervariasi menjadi 4 (GK, FW, MF, DF)"""

# memetakan posisi pertama player manjadi GK,DF,MF,dan FW
player_df['main_position'] = player_df['player_positions'].str.split(',').str[0]

position_map = {
    'GK': 'GK',
    'CB': 'DF', 'LB': 'DF', 'RB': 'DF', 'LWB': 'DF', 'RWB': 'DF',
    'CDM': 'MF', 'CM': 'MF', 'CAM': 'MF', 'LM': 'MF', 'RM': 'MF',
    'ST': 'FW', 'CF': 'FW', 'LW': 'FW', 'RW': 'FW'
}

# Terapkan mapping ke kolom baru
player_df['position_group'] = player_df['main_position'].map(position_map)

"""Melihat berapa frekuensi dari setiap posisi"""

position_group_counts = player_df['position_group'].value_counts()

plt.figure(figsize=(8, 6))
sns.barplot(x=position_group_counts.index, y=position_group_counts.values, palette='viridis')
plt.title('Distribusi Jumlah Pemain berdasarkan Grup Posisi')
plt.xlabel('Grup Posisi')
plt.ylabel('Jumlah Pemain')
plt.show()

"""Encoding kolom position_group"""

# encoding posisi grup
label_encoder = LabelEncoder()
player_df['position_group_encoded'] = label_encoder.fit_transform(player_df['position_group'])

# Menampilkan pemetaan dari nilai numerik ke label asli
encoded_to_original = dict(enumerate(label_encoder.classes_))
print("Mapping from encoded value to original label:")
print(encoded_to_original)

"""# MODEL KLASIFIKASI"""

X = player_df[skill]
y = player_df['position_group_encoded']

"""Karena X berdistribusi normal, maka akan distandarisasi"""

# standarisasi skill
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=skill)
X_scaled_df.head()

"""Splitting data"""

# splitting data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

"""## KNN

Evaluasi Training pada model KNN
"""

y_pred_train_knn = knn.predict(X_train)
accuracy_train_knn = accuracy_score(y_train, y_pred_train_knn)
print(f"Akurasi KNN pada data training: {accuracy_train_knn:.4f}")

"""Evaluasi Testing pada model KNN"""

k_range = range(1, 30)
accuracy_scores = []

for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)

plt.figure(figsize=(10, 6))
plt.plot(k_range, accuracy_scores, marker='o')
plt.title('Akurasi KNN untuk Berbagai Nilai k')
plt.xlabel('Nilai k')
plt.ylabel('Akurasi')
plt.xticks(k_range)
plt.grid(True)
plt.show()

optimal_k = k_range[accuracy_scores.index(max(accuracy_scores))]
print(f"Nilai k optimal adalah: {optimal_k}")
print(f"Akurasi tertinggi untuk k={optimal_k} adalah: {max(accuracy_scores):.4f}")

"""Confusion matrix pada model KNN"""

# confusion matrix
knn_optimal = KNeighborsClassifier(n_neighbors=optimal_k)
knn_optimal.fit(X_train, y_train)

y_pred_optimal = knn_optimal.predict(X_test)

conf_matrix = confusion_matrix(y_test, y_pred_optimal)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Position Group')
plt.ylabel('Actual Position Group')
plt.show()
print("\nClassification Report:")
print(classification_report(y_test, y_pred_optimal, target_names=label_encoder.classes_))

"""## RANDOM FOREST

Evaluasi Training pada model random forest
"""

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

y_pred_train_rf = rf_model.predict(X_train)
accuracy_train_rf = accuracy_score(y_train, y_pred_train_rf)
print(f"Akurasi Random Forest pada data training: {accuracy_train_rf:.4f}")

"""Evaluasi Testing pada model random forest"""

# evaluasi model
y_pred_rf = rf_model.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f"Akurasi Random Forest: {accuracy_rf:.4f}")

conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_rf, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.title('Confusion Matrix - Random Forest')
plt.xlabel('Predicted Position Group')
plt.ylabel('Actual Position Group')
plt.show()

print("\nClassification Report (Random Forest):")
print(classification_report(y_test, y_pred_rf, target_names=label_encoder.classes_))

"""# PREDIKSI MODEL KNN dan RANDOM FOREST

Prediksi model KNN dan random forest dengan mengambil 5 data
"""

random_samples = player_df.sample(n=5, random_state=42)
X_random = random_samples[skill]
X_random_scaled = scaler.transform(X_random)

# KNN
y_pred_random_knn = knn_optimal.predict(X_random_scaled)

# Random Forest
y_pred_random_rf = rf_model.predict(X_random_scaled)

original_positions = random_samples['position_group'].values

predicted_positions_knn = label_encoder.inverse_transform(y_pred_random_knn)
predicted_positions_rf = label_encoder.inverse_transform(y_pred_random_rf)

# Display the results
print("Original Positions:")
print(original_positions)
print("\nPredicted Positions (KNN):")
print(predicted_positions_knn)
print("\nPredicted Positions (Random Forest):")
print(predicted_positions_rf)